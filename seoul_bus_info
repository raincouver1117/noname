#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 40000              //Data set의 최대 갯수
#define LN_SIZE 20              //버스노선 이름 길이
#define SN_SIZE 100             //정류장 이름 길

#define BI_FILE "seoul_bus_info.txt"

typedef struct location {
    double x;
    double y;
} _location;

typedef struct bus_data {
    int line_id;
    char line_name[LN_SIZE];
    int order;
    int link_id;
    int station_id;
    int ars_id;
    char station_name[SN_SIZE];
    _location loc;
} _bus_data;

void find_by_station_name(_bus_data * ptr_bus_info, int size);
void find_by_line_name(_bus_data * ptr_bus_info, int size);

int main(void)
{
    _bus_data bus_data_list[SIZE];                  // 불러온 파일 데이터가 저장될 배열
    FILE *fp_bus_data;                              // 파일 포인터
    char read_buffer[255];                  // fgets로 읽어들일 임시 문자열 
    int index = 0;                                  // 불러온 데이터 갯수를 저장
    int menu_option = -1;                           // 메뉴에 사용할 변수
    int scanf_result;                               // scanf 에러 검출을 위한 변수
    
    if((fp_bus_data = fopen("seoul_bus_info.txt", "r")) == NULL) {
        fprintf(stderr,"Can\'t open \"seoul_bus_info.txt\"\n");
        exit(EXIT_FAILURE);
    }                                               // 파일 열기가 실패하면 에러메세지를 출력하고 프로그램 종료
    rewind(fp_bus_data);                            // 파일 포인터를 파일이 시작하는 부분으로 되돌리기
    
    while(fgets(read_buffer, 255, fp_bus_data) != NULL) {       // fgets는 buffer_size만큼만 읽거나, '\n'(뉴라인)까지 읽음. EOF를 만나면 NULL을 리턴하고 루프종료
        for(int i = 0; i < strlen(read_buffer); i++) {                          // 임시버퍼에 읽은 파일을 구조체에 저장하기 쉽게 ','(콤마) 를 ' ' (빈칸)으로 교체
            if(read_buffer[i] == ',') {
                read_buffer[i] = ' ';
            }
        }
        
        sscanf(read_buffer, "%d %s %d %d %d %d %s %lf %lf", &bus_data_list[index].line_id, bus_data_list[index].line_name, &bus_data_list[index].order, &bus_data_list[index].link_id, &bus_data_list[index].station_id, &bus_data_list[index].ars_id, bus_data_list[index].station_name, &bus_data_list[index].loc.x, &bus_data_list[index].loc.y);
        
        /* 한줄씩 읽어들인 데이터를 하나씩 구분하여 저장하기 보다는 한번에 저장하면 코딩할 라인이 매우 줄어들지만,
         자료가 중간에 오염되어 있으면 그 지점으로 으로부터 칸이 밀리거나 당겨질수도 있고 타입이 맞지 않으면 에러가 뜸 */

        index++;
    }
    fclose(fp_bus_data);                // 정상적으로 데이터가 로드되었으면 파일포인터를 닫아줌.

    printf("===================================\n");
    printf("1. 정류장 정차 버스 찾기\n");
    printf("2. 버스 노선의 정차 정류장 찾기\n");
    printf("3. 종료\n");
    printf("===================================\n");
    printf("정수값을 선택하시오: ");
    
    while((scanf_result = scanf("%d", &menu_option)) != 1 || (menu_option < 0 || menu_option > 3)) {
        printf("\n*****     잘못된 입력입니다.     *****\n\n");
        printf("정수값을 선택하시오: ");
        while(getchar() != '\n')
            continue;
    }   // 잘못된 입력인 경우 에러메세지를 출력하고 키보드재입력. scanf가 정수값을 기대하기 때문에 숫자가 아닌 영문을 입력할 경우 버퍼를 비워줘야함
        
    while(menu_option > 0 && menu_option < 3) {             // 메뉴 항목에 따라 스위치를 사용하여 각 함수를 호출
        switch(menu_option) {
            case 1:
                find_by_station_name(bus_data_list, index);
                break;
            case 2:
                find_by_line_name(bus_data_list, index);
                break;
            default : ;
        }
        
        printf("===================================\n");
        printf("1. 정류장 정차 버스 찾기\n");
        printf("2. 버스 노선의 정차 정류장 찾기\n");
        printf("3. 종료\n");
        printf("===================================\n");
        printf("정수값을 선택하시오: ");
        
        while((scanf_result = scanf("%d", &menu_option)) != 1 || (menu_option < 0 || menu_option > 3)) {
            printf("\n*****     잘못된 입력입니다.     *****\n\n");
            printf("정수값을 선택하시오: ");
            while(getchar() != '\n')
                continue;
        }    // 마찬가지로 잘못된 입력의 경우 에러메세지를 출력하고 키보드 재입력. 마찬가지로 정수값이 아닌 값은 버퍼를 비워줌
    }
    
    printf("종료.\n");
    return 0;
}

void find_by_station_name(_bus_data * ptr_bus_info, int size)
{
    char st[SN_SIZE] = { 0 };                      // 키보드 입력을 받을 문자열
    char *found;                            // strstr 명령어를 사용하여 구조체를 검색할때 리턴값을 저장
    int i = 0, count = 0;
    
    printf("정류장 이름을 입력하세요(일부 명칭도 가능): ");
    
    while(getchar() != '\n')                       // 키보드입력 버퍼를 비워주어 검색어 입력시 발생할 오류를 방지
        continue;
    
    char *ret_val = fgets(st, SN_SIZE, stdin);
    if(ret_val) {
        while(st[i] != '\n' && st[i] != '\0')
            i++;
        if(st[i] == '\n')
            st[i] = '\0';
        else
            while(getchar() != '\n')
                continue;
    }                                               // fgets는 \n (뉴라인) 까지 입력되므로 뉴라인을 없애주어야 오류가 없음
    
    for(i = 0; i < size; i++) {
        if((found = strstr((ptr_bus_info + i)->station_name, ret_val))) {
            printf("[%s] 정류소에 [%s] 버스가 정차합니다.\n", (ptr_bus_info + i)->station_name, (ptr_bus_info + i)->line_name);
            count++;
        }       // 검색어를 검색하여 일치하면 포인터를 반환하고, 그렇지 않으면 NULL을 리턴하므로 포인터를 반환하는경우 메세지 출력
    }
    if(count == 0)
        printf("\n*****     결과가 존재하지 않습니다.     *****\n\n");
}

void find_by_line_name(_bus_data * ptr_bus_info, int size)
{
    char st[SN_SIZE] = { 0 };               // 키보드 입력을 받을 문자열
    int found;                              // strcmp 명령어를 사용하여 구조체를 검색할때 리턴값을 저장
    int i = 0, count = 0;
    
    printf("버스노선명을 입력하세요: ");
    
    while(getchar() != '\n')                // 키보드입력 버퍼를 비워주어 검색어 입력시 발생할 오류를 방지
        continue;
    
    char *ret_val = fgets(st, SN_SIZE, stdin);
    if(ret_val) {
        while(st[i] != '\n' && st[i] != '\0')
            i++;
        if(st[i] == '\n')
            st[i] = '\0';
        else
            while(getchar() != '\n')
                continue;
    }
    
    for(i = 0; i < size; i++) {
        if((found = strcmp((ptr_bus_info + i)->line_name, ret_val)) == 0) {
            printf("[%s] 버스가 [%s] 정류장에 정차합니다.\n", (ptr_bus_info + i)->line_name, (ptr_bus_info + i)->station_name);
            count++;
        }
    }   // 정확하게 일치하는 버스노선명 검색결과 출력
    
    if(count == 0)
        printf("\n*****     일치하는 결과가 존재하지 않습니다.     *****\n\n");
}
